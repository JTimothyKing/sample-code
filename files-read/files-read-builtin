#!/usr/bin/env perl
use strict;
use warnings;

use Benchmark ':hireswallclock';
use Getopt::Long;

use File::Find ();
use File::Spec ();

my $path_to_scan;
my $scan_only;

GetOptions(
   'dir|d=s' => \$path_to_scan,
   'scan-only' => \$scan_only,
) or die "Error in command line arguments\n";

$path_to_scan //= do {
    my ($volume, $dir, $file) = File::Spec->splitpath($^X);
    my @dirs = File::Spec->splitdir($dir);
    while (1) {
        die "cannot determine Perl install prefix\n" unless @dirs;
        my $end_dir = pop @dirs;
        last if $end_dir eq 'bin';
    }
    File::Spec->catpath( $volume, File::Spec->catdir(@dirs) );
};
print STDERR "Scanning $path_to_scan\n";

##########

my $mark_start = Benchmark->new();

my @all_files;

my $total_file_size = 0;
File::Find::find({
    no_chdir => 1,
    wanted => sub {
        my $file = $File::Find::name;
        my $filesize = -s $file;
        if ($filesize) {
            $total_file_size += $filesize;
            push @all_files, $file;
        }
    },
}, $path_to_scan);
print STDERR "$total_file_size bytes to read\n";

my $mark_got_files = Benchmark->new();

##########

unless ($scan_only) {
    my $bytes_read = 0;
    FILE: for my $file (@all_files) {
        open my $fh, '<', $file
            or warn("cannot open file '$file'\n"), next FILE;
        BLOCK: while (1) {
            my $data;
            read($fh, $data, 32768) or last BLOCK;
            $bytes_read += length $data;
        }
        close $fh;
    }
    print STDERR "$bytes_read bytes read\n";
}

my $mark_end = Benchmark->new();

##########

print ' Scan time: ', timestr(timediff($mark_got_files, $mark_start)), "\n",
      ' Read time: ', timestr(timediff($mark_end, $mark_got_files)), "\n",
      'Total time: ', timestr(timediff($mark_end, $mark_start)), "\n";

__END__
